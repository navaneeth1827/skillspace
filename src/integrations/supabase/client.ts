
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rujokqtczahscutztzjh.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ1am9rcXRjemFoc2N1dHp0empoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1MzUzMzAsImV4cCI6MjA1NzExMTMzMH0.pLMB0WqFF_9D-VkTzKOQEvI9Q050R8EmBAnKD-1oYgc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Since we can't directly modify the Database types, we need to extend them at runtime
// This is a workaround to make TypeScript happy with our new tables
const supabaseClient = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    realtime: {
      params: {
        eventsPerSecond: 20
      }
    },
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    db: {
      schema: 'public'
    }
  }
);

// Type assertion to make TypeScript accept our extended tables
export const supabase = supabaseClient as unknown as ExtendedSupabaseClient;

// Define interface for calendar events
export interface CalendarEvent {
  id: string;
  title: string;
  description: string | null;
  start_time: string;
  end_time: string;
  location: string | null;
  is_all_day: boolean;
  event_type: string;
  user_id: string;
  created_at?: string;
  updated_at?: string;
}

// Define interface for tasks
export interface Task {
  id: string;
  title: string;
  description: string | null;
  due_date: string | null;
  priority: 'low' | 'medium' | 'high';
  status: 'todo' | 'in-progress' | 'completed';
  project: string | null;
  user_id: string;
  created_at?: string;
  updated_at?: string;
}

// Extend the PostgrestQueryBuilder to include our new tables
type ExtendedSupabaseClient = typeof supabaseClient & {
  from(table: 'calendar_events'): any;
  from(table: 'tasks'): any;
}
